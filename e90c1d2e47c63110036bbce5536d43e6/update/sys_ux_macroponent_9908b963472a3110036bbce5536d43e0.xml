<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_macroponent">
    <sys_ux_macroponent action="INSERT_OR_UPDATE">
        <associated_types/>
        <bundles/>
        <category>page</category>
        <component_dependencies/>
        <composition>[
    {
        "definition": {
            "id": "d356d14b6e293a3020a244b63d278d8f",
            "type": "MACROPONENT"
        },
        "elementId": "container_1",
        "elementLabel": "Container 1",
        "eventMappings": [
            
        ],
        "isHidden": {
            "type": "JSON_LITERAL",
            "value": ""
        },
        "isNonDestructive": false,
        "overrides": {
            "composition": [
                {
                    "definition": {
                        "id": "73c29e4f9aeb949eb0c66320fb1984ff",
                        "type": "MACROPONENT"
                    },
                    "elementId": "collapsible_timeline_table",
                    "elementLabel": "Collapsible Timeline Table",
                    "eventMappings": [
                        
                    ],
                    "isHidden": {
                        "type": "JSON_LITERAL",
                        "value": ""
                    },
                    "isNonDestructive": false,
                    "overrides": null,
                    "propertyValues": {
                        "actions": {
                            "script": {
                                "apiVersion": "2.0.0",
                                "inlineScript": "/**\n * @param {params} params\n * @param {api} params.api\n * @param {any} params.imports\n */\nfunction evaluateProperty({\n    api\n}) {\n    const customEvents = api.context.props.customEvents || [];\n\n    function getPaddedValue(value) {\n        return value &lt; 10 ? '0' + value : value;\n    }\n\n    function formatDuration(milliSeconds) {    \n        let formattedValue = '';\n\n        if (milliSeconds || milliSeconds === 0) {\n            let seconds = milliSeconds / 1000;\n            const hours = parseInt(seconds / 3600);\n            seconds = seconds % 3600;\n            const minutes = parseInt(seconds / 60);\n            seconds = parseInt(seconds % 60);\n            formattedValue = getPaddedValue(hours) + \":\" + getPaddedValue(minutes) + \":\" + getPaddedValue(seconds);\n        }\n        \n        return formattedValue;\n    }\n            \n    return customEvents.filter(action =&gt; action.Type &amp;&amp; action.Type.toLowerCase() === 'topic')\n        .sort((a, b) =&gt; a.Time - b.Time)\n            .map(action =&gt; ({\n                name: action.Name,\n                type: action.Type,\n                time: formatDuration(action.Time || 0),\n                properties: action.Properties\n            }));\n}"
                            },
                            "type": "CLIENT_TRANSFORM_SCRIPT"
                        }
                    },
                    "slot": "Main",
                    "styles": {}
                }
            ],
            "layout": {
                "default": {
                    "children": null,
                    "items": [
                        {
                            "rules": {
                                "grid-area": "main"
                            },
                            "slotName": "Main",
                            "styles": {
                                "display": "flex",
                                "flex-direction": "column",
                                "height": "100%"
                            }
                        }
                    ],
                    "root": null,
                    "rules": {
                        "grid-gap": "1rem",
                        "grid-template-areas": "\"main\"",
                        "grid-template-columns": "1fr",
                        "grid-template-rows": "auto",
                        "height": "100%"
                    },
                    "styles": null,
                    "templateId": "5832fd4d53c31010e6bcddeeff7b12db",
                    "type": "grid"
                }
            }
        },
        "propertyValues": {},
        "slot": "Main",
        "styles": {
            "height": "100%",
            "width": "100%"
        }
    }
]</composition>
        <da_relay_models/>
        <data>[
    
]</data>
        <description/>
        <dispatched_events/>
        <ext_controller_dep/>
        <extends display_value="Page Template">19be392623033300f4b4c50947bf65ba</extends>
        <extension_point/>
        <handled_events/>
        <interactions/>
        <interfaces/>
        <internal_event_mappings>{}</internal_event_mappings>
        <layout>{
    "default": {
        "children": null,
        "items": [
            {
                "rules": {
                    "grid-area": "main"
                },
                "slotName": "Main",
                "styles": {
                    "display": "flex",
                    "flex-direction": "column"
                }
            }
        ],
        "root": null,
        "rules": {
            "grid-gap": "1rem",
            "grid-template-areas": "\"main\"",
            "grid-template-columns": "1fr",
            "grid-template-rows": "minmax(400px,auto)",
            "height": "100%"
        },
        "styles": null,
        "templateId": "28bde4cd53431010e6bcddeeff7b12cc",
        "type": "grid"
    }
}</layout>
        <macroponent_dependencies/>
        <name>Timeline default</name>
        <output_prop_mapping/>
        <props>[
    {
        "defaultValue": null,
        "description": "",
        "fieldType": "json",
        "label": "customEvents",
        "mandatory": false,
        "name": "customEvents",
        "readOnly": false,
        "selectable": false,
        "typeMetadata": null,
        "valueType": "string"
    }
]</props>
        <required_translations>[ ]</required_translations>
        <root_component/>
        <root_component_config>{ }</root_component_config>
        <root_component_definition/>
        <schema_version>1.0.0</schema_version>
        <state_properties>[
    
]</state_properties>
        <sys_class_name>sys_ux_macroponent</sys_class_name>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2023-11-22 20:36:36</sys_created_on>
        <sys_id>9908b963472a3110036bbce5536d43e0</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>Timeline default</sys_name>
        <sys_package display_value="AT&amp;amp;T Workspace" source="x_876519_att_work">e90c1d2e47c63110036bbce5536d43e6</sys_package>
        <sys_policy/>
        <sys_scope display_value="AT&amp;amp;T Workspace">e90c1d2e47c63110036bbce5536d43e6</sys_scope>
        <sys_update_name>sys_ux_macroponent_9908b963472a3110036bbce5536d43e0</sys_update_name>
        <sys_updated_by>system</sys_updated_by>
        <sys_updated_on>2023-11-22 20:36:37</sys_updated_on>
    </sys_ux_macroponent>
    <sys_translated_text action="delete_multiple" query="documentkey=9908b963472a3110036bbce5536d43e0"/>
</record_update>
